"""
@file: data_monitoring_service.py  
@description: –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
@dependencies: OrderProtectionService, logging, metrics
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from sqlmodel import Session, select, func

from app.models.order import Order
from app.models.order_event import OrderEvent

logger = logging.getLogger(__name__)

@dataclass
class DataHealthMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –¥–∞–Ω–Ω—ã—Ö"""
    total_orders: int
    orders_with_issues: int
    data_regression_ratio: float
    missing_data_ratio: float
    anomaly_score: float
    last_successful_sync: datetime
    critical_issues: List[str]

class DataMonitoringService:
    """
    –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
    - –ö–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç Allegro
    - –ê–Ω–æ–º–∞–ª–∏–∏ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏  
    - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö
    - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    """
    
    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    CRITICAL_MISSING_DATA_RATIO = 0.20  # 20% –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    WARNING_MISSING_DATA_RATIO = 0.10   # 10% –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    CRITICAL_REGRESSION_RATIO = 0.15    # 15% –∑–∞–∫–∞–∑–æ–≤ —Å –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–µ–π
    MAX_SYNC_GAP_HOURS = 2             # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    
    def __init__(self, db: Session):
        self.db = db
        
    def check_data_health(self, time_window_hours: int = 24) -> DataHealthMetrics:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Args:
            time_window_hours: –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —á–∞—Å–∞—Ö
            
        Returns:
            DataHealthMetrics: –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        """
        
        cutoff_time = datetime.utcnow() - timedelta(hours=time_window_hours)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        sync_events = self.db.exec(
            select(OrderEvent)
            .where(OrderEvent.occurred_at >= cutoff_time)
            .where(OrderEvent.event_type == "ORDER_SYNC")
        ).all()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        total_orders = len(sync_events)
        orders_with_issues = 0
        regression_count = 0
        missing_data_count = 0
        critical_issues = []
        
        for event in sync_events:
            issues = self._analyze_event_data_quality(event)
            if issues["has_missing_data"]:
                missing_data_count += 1
            if issues["has_regression"]:
                regression_count += 1
            if issues["critical_issues"]:
                orders_with_issues += 1
                critical_issues.extend(issues["critical_issues"])
                
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        missing_data_ratio = missing_data_count / total_orders if total_orders > 0 else 0
        regression_ratio = regression_count / total_orders if total_orders > 0 else 0
        
        # –ê–Ω–æ–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä (0-1, –≥–¥–µ 1 = –∫—Ä–∏—Ç–∏—á–Ω–æ)
        anomaly_score = self._calculate_anomaly_score(
            missing_data_ratio, regression_ratio, total_orders
        )
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        last_sync = self._get_last_successful_sync()
        
        metrics = DataHealthMetrics(
            total_orders=total_orders,
            orders_with_issues=orders_with_issues,
            data_regression_ratio=regression_ratio,
            missing_data_ratio=missing_data_ratio,
            anomaly_score=anomaly_score,
            last_successful_sync=last_sync,
            critical_issues=list(set(critical_issues))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._log_health_metrics(metrics)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self._send_alerts_if_needed(metrics)
        
        return metrics
        
    def _analyze_event_data_quality(self, event: OrderEvent) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"""
        
        event_data = event.event_data or {}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        required_fields = ["id", "status", "buyer", "lineItems"]
        missing_fields = [field for field in required_fields if not event_data.get(field)]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        buyer_data = event_data.get("buyer", {})
        empty_buyer_fields = []
        for field in ["email", "firstName"]:
            if not buyer_data.get(field):
                empty_buyer_fields.append(field)
                
        line_items = event_data.get("lineItems", [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        has_missing_data = bool(missing_fields or empty_buyer_fields)
        has_regression = len(line_items) == 0  # Simplified check
        
        critical_issues = []
        if missing_fields:
            critical_issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        if empty_buyer_fields:
            critical_issues.append(f"–ü—É—Å—Ç—ã–µ –ø–æ–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {empty_buyer_fields}")
        if not line_items:
            critical_issues.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ")
            
        return {
            "has_missing_data": has_missing_data,
            "has_regression": has_regression,
            "critical_issues": critical_issues,
            "missing_fields": missing_fields,
            "empty_buyer_fields": empty_buyer_fields
        }
        
    def _calculate_anomaly_score(self, missing_ratio: float, 
                                regression_ratio: float, total_orders: int) -> float:
        """
        –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.
        
        –§–∞–∫—Ç–æ—Ä—ã:
        - –î–æ–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        - –î–æ–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–µ–π
        - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ (—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ)
        """
        
        score = 0.0
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if missing_ratio >= self.CRITICAL_MISSING_DATA_RATIO:
            score += 0.4
        elif missing_ratio >= self.WARNING_MISSING_DATA_RATIO:
            score += 0.2
            
        # –®—Ç—Ä–∞—Ñ –∑–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
        if regression_ratio >= self.CRITICAL_REGRESSION_RATIO:
            score += 0.4
        elif regression_ratio >= 0.05:  # 5% –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            score += 0.2
            
        # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        expected_min_orders = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ 24 —á–∞—Å–∞
        if total_orders < expected_min_orders:
            score += 0.3
            
        return min(score, 1.0)  # –ú–∞–∫—Å–∏–º—É–º 1.0
        
    def _get_last_successful_sync(self) -> datetime:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        
        last_event = self.db.exec(
            select(OrderEvent)
            .where(OrderEvent.event_type == "ORDER_SYNC")
            .order_by(OrderEvent.occurred_at.desc())
            .limit(1)
        ).first()
        
        if last_event:
            return last_event.occurred_at
        else:
            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
            return datetime.utcnow() - timedelta(days=365)
            
    def _log_health_metrics(self, metrics: DataHealthMetrics):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∑–¥–æ—Ä–æ–≤—å—è –¥–∞–Ω–Ω—ã—Ö"""
        
        if metrics.anomaly_score >= 0.7:
            log_level = logging.CRITICAL
            emoji = "üö®"
        elif metrics.anomaly_score >= 0.4:
            log_level = logging.WARNING  
            emoji = "‚ö†Ô∏è"
        else:
            log_level = logging.INFO
            emoji = "‚úÖ"
            
        logger.log(log_level, 
            f"{emoji} –ú–µ—Ç—Ä–∏–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –¥–∞–Ω–Ω—ã—Ö:\n"
            f"  –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {metrics.total_orders}\n"
            f"  –° –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {metrics.orders_with_issues}\n"
            f"  –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {metrics.missing_data_ratio:.1%}\n"
            f"  –î–µ–≥—Ä–∞–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: {metrics.data_regression_ratio:.1%}\n"
            f"  –°–∫–æ—Ä –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏: {metrics.anomaly_score:.2f}\n"
            f"  –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {metrics.last_successful_sync}\n"
            f"  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {len(metrics.critical_issues)}"
        )
        
    def _send_alerts_if_needed(self, metrics: DataHealthMetrics):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
        
        alerts = []
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –¥–æ–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if metrics.missing_data_ratio >= self.CRITICAL_MISSING_DATA_RATIO:
            alerts.append(
                f"üö® –ö–†–ò–¢–ò–ß–ù–û: {metrics.missing_data_ratio:.1%} –∑–∞–∫–∞–∑–æ–≤ –∏–º–µ—é—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!"
            )
            
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if metrics.data_regression_ratio >= self.CRITICAL_REGRESSION_RATIO:
            alerts.append(
                f"üö® –ö–†–ò–¢–ò–ß–ù–û: {metrics.data_regression_ratio:.1%} –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö!"
            )
            
        # –î–æ–ª–≥–∏–π –ø–µ—Ä–µ—Ä—ã–≤ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync_gap = datetime.utcnow() - metrics.last_successful_sync
        if sync_gap.total_seconds() > self.MAX_SYNC_GAP_HOURS * 3600:
            alerts.append(
                f"üö® –ö–†–ò–¢–ò–ß–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ {sync_gap.total_seconds()/3600:.1f} —á–∞—Å–æ–≤!"
            )
            
        # –í—ã—Å–æ–∫–∏–π –æ–±—â–∏–π —Å–∫–æ—Ä –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏
        if metrics.anomaly_score >= 0.8:
            alerts.append(
                f"üö® –ö–†–ò–¢–ò–ß–ù–û: –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Å–∫–æ—Ä –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö: {metrics.anomaly_score:.2f}"
            )
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
        for alert in alerts:
            logger.critical(alert)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Slack, email, SMS –∏ —Ç.–¥.
            
    def should_pause_sync(self) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏.
        
        Circuit Breaker Pattern –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –º–∞—Å—Å–æ–≤–æ–π –ø–æ—Ä—á–∏ –¥–∞–Ω–Ω—ã—Ö.
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        """
        
        metrics = self.check_data_health(time_window_hours=1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        should_pause = (
            metrics.anomaly_score >= 0.9 or  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Å–∫–æ—Ä –∞–Ω–æ–º–∞–ª—å–Ω–æ—Å—Ç–∏
            metrics.missing_data_ratio >= 0.5 or  # –ë–æ–ª–µ–µ 50% –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
            len(metrics.critical_issues) >= 10  # –ú–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        )
        
        if should_pause:
            logger.critical(
                f"üõë –û–°–¢–ê–ù–û–í–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò! "
                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏: "
                f"anomaly_score={metrics.anomaly_score:.2f}, "
                f"missing_data_ratio={metrics.missing_data_ratio:.1%}"
            )
            
        return should_pause
        
    def generate_data_quality_report(self, days: int = 7) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥.
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict: –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        
        cutoff_time = datetime.utcnow() - timedelta(days=days)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        daily_metrics = []
        for day in range(days):
            day_start = cutoff_time + timedelta(days=day)
            day_end = day_start + timedelta(days=1)
            
            day_events = self.db.exec(
                select(OrderEvent)
                .where(OrderEvent.occurred_at >= day_start)
                .where(OrderEvent.occurred_at < day_end)
                .where(OrderEvent.event_type == "ORDER_SYNC")
            ).all()
            
            if day_events:
                day_metrics = self._analyze_daily_metrics(day_events, day_start.date())
                daily_metrics.append(day_metrics)
                
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_events = self.db.exec(
            select(func.count(OrderEvent.id))
            .where(OrderEvent.occurred_at >= cutoff_time)
            .where(OrderEvent.event_type == "ORDER_SYNC")
        ).one()
        
        # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º
        top_issues = self._get_top_data_issues(cutoff_time)
        
        return {
            "period": f"{days} days",
            "start_date": cutoff_time.date().isoformat(),
            "end_date": datetime.utcnow().date().isoformat(),
            "total_sync_events": total_events,
            "daily_metrics": daily_metrics,
            "top_issues": top_issues,
            "recommendations": self._generate_recommendations(daily_metrics, top_issues)
        }
        
    def _analyze_daily_metrics(self, events: List[OrderEvent], date) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å"""
        
        total_orders = len(events)
        problematic_orders = 0
        missing_data_orders = 0
        
        for event in events:
            analysis = self._analyze_event_data_quality(event)
            if analysis["critical_issues"]:
                problematic_orders += 1
            if analysis["has_missing_data"]:
                missing_data_orders += 1
                
        return {
            "date": date.isoformat(),
            "total_orders": total_orders,
            "problematic_orders": problematic_orders,
            "missing_data_orders": missing_data_orders,
            "health_score": 1.0 - (problematic_orders / total_orders) if total_orders > 0 else 1.0
        }
        
    def _get_top_data_issues(self, since: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø–∞ —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏"""
        
        # –ó–∞–≥–ª—É—à–∫–∞ - –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        return [
            {"issue": "Missing buyer email", "count": 45, "severity": "medium"},
            {"issue": "Empty line items", "count": 12, "severity": "high"}, 
            {"issue": "Missing delivery data", "count": 23, "severity": "low"}
        ]
        
    def _generate_recommendations(self, daily_metrics: List[Dict], 
                                 top_issues: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
        if len(daily_metrics) >= 2:
            recent_health = daily_metrics[-1]["health_score"]
            previous_health = daily_metrics[-2]["health_score"]
            
            if recent_health < previous_health - 0.1:
                recommendations.append(
                    "‚ùó –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —É—Ö—É–¥—à–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Allegro API."
                )
                
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º
        if any(issue["severity"] == "high" for issue in top_issues):
            recommendations.append(
                "üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏."
            )
            
        if not recommendations:
            recommendations.append("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.")
            
        return recommendations 
    
    def detect_data_anomalies(self, order_events: List[Dict[str, Any]]) -> List[str]:
        """
        –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π –≤ —Å–ø–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤.
        
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
        - –°—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        - –ß–∞—Å—Ç–æ—Ç—É –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
        - –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–±—ã—Ç–∏—è—Ö
        - –ü–∞—Ç—Ç–µ—Ä–Ω—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å API
        
        Args:
            order_events: –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤ –æ—Ç Allegro API
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π
        """
        
        anomalies = []
        
        if not order_events:
            return ["‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤"]
            
        total_events = len(order_events)
        events_with_missing_data = 0
        events_with_malformed_data = 0
        duplicate_order_ids = set()
        order_id_counts = {}
        
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –≤ {total_events} —Å–æ–±—ã—Ç–∏—è—Ö –∑–∞–∫–∞–∑–æ–≤...")
        
        for event in order_events:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏—è
            if not self._validate_event_structure(event):
                events_with_malformed_data += 1
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º order_id –±–µ–∑–æ–ø–∞—Å–Ω–æ
            order_id = self._extract_order_id_safe(event)
            if not order_id:
                events_with_missing_data += 1
                continue
                
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
            order_id_counts[order_id] = order_id_counts.get(order_id, 0) + 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
            if not self._validate_order_data_quality(event):
                events_with_missing_data += 1
                
        # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        duplicates = {oid: count for oid, count in order_id_counts.items() if count > 1}
        if duplicates:
            duplicate_count = sum(duplicates.values()) - len(duplicates)
            anomalies.append(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {duplicate_count} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è {len(duplicates)} –∑–∞–∫–∞–∑–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        missing_data_ratio = events_with_missing_data / total_events
        if missing_data_ratio > self.WARNING_MISSING_DATA_RATIO:
            anomalies.append(f"‚ö†Ô∏è {missing_data_ratio:.1%} —Å–æ–±—ã—Ç–∏–π –∏–º–µ—é—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
        if missing_data_ratio > self.CRITICAL_MISSING_DATA_RATIO:
            anomalies.append(f"‚ùå –ö–†–ò–¢–ò–ß–ù–û: {missing_data_ratio:.1%} —Å–æ–±—ã—Ç–∏–π —Å —Å–µ—Ä—å–µ–∑–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–±—ã—Ç–∏–π
        malformed_ratio = events_with_malformed_data / total_events
        if malformed_ratio > 0.05:  # –ë–æ–ª–µ–µ 5% —Å–æ–±—ã—Ç–∏–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            anomalies.append(f"‚ùå {malformed_ratio:.1%} —Å–æ–±—ã—Ç–∏–π –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å–æ–±—ã—Ç–∏–π
        unique_orders = len(order_id_counts)
        if unique_orders < total_events * 0.5:  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
            anomalies.append(f"‚ö†Ô∏è –ù–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∑–∞–∫–∞–∑–æ–≤: {unique_orders} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑ {total_events} —Å–æ–±—ã—Ç–∏–π")
            
        if not anomalies:
            logger.info("‚úÖ –ê–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(anomalies)} –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö")
            
        return anomalies
    
    def _validate_event_structure(self, event: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–±—ã—Ç–∏—è"""
        required_fields = ['id', 'type', 'event']
        return all(field in event for field in required_fields)
    
    def _extract_order_id_safe(self, event: Dict[str, Any]) -> Optional[str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ order_id –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è order_id
            order_data = event.get('order', {})
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º checkoutForm.id (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Allegro)
            if 'checkoutForm' in order_data and 'id' in order_data['checkoutForm']:
                return order_data['checkoutForm']['id']
                
            # –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ order.id (—Å—Ç–∞—Ä—ã–π –ø—É—Ç—å)
            if 'id' in order_data:
                return order_data['id']
                
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            return None
            
        except (AttributeError, KeyError, TypeError):
            return None
    
    def _validate_order_data_quality(self, event: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–±—ã—Ç–∏–∏"""
        try:
            order_data = event.get('order', {})
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            if not order_data:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
            checkout_form = order_data.get('checkoutForm', {})
            if not checkout_form:
                return False
                
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            has_id = bool(checkout_form.get('id'))
            has_status = bool(checkout_form.get('status'))
            has_buyer = bool(checkout_form.get('buyer'))
            
            return has_id and has_status and has_buyer
            
        except (AttributeError, KeyError, TypeError):
            return False 