"""
@file: order_sync_service.py
@description: –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö
@dependencies: OrderProtectionService, DataMonitoringService, AllegroAuthService, DeduplicationService
"""

import logging
from datetime import datetime
from typing import List, Dict, Any, Optional
from uuid import UUID
from sqlmodel import Session

from app.services.order_protection_service import OrderProtectionService, DataIntegrityError
from app.services.data_monitoring_service import DataMonitoringService
from app.services.allegro_auth_service import AllegroAuthService
from app.services.deduplication_service import DeduplicationService
from app.models.sync_history import SyncHistory, SyncStatus
from app.models.order_event import OrderEvent
import httpx

logger = logging.getLogger(__name__)

class SyncPausedException(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    pass

class OrderSyncService:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö.
    
    –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
    1. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö  
    3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –∞–Ω–æ–º–∞–ª–∏—è—Ö
    4. –ü–æ–ª–Ω—ã–π audit trail
    5. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    6. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    """
    
    def __init__(self, db: Session, user_id: str = None, token_id: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            token_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
        """
        self.db = db
        self.user_id = user_id
        self.token_id = token_id
        if token_id:
            self.protection_service = OrderProtectionService(db, UUID(token_id))
        else:
            self.protection_service = None
        self.monitoring_service = DataMonitoringService(db)
        self.deduplication_service = DeduplicationService(db)
        
    def sync_orders_safe(self, full_sync: bool = False, sync_from_date: Optional[datetime] = None, sync_to_date: Optional[datetime] = None) -> Dict[str, Any]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            full_sync: –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–ª–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è
            sync_from_date: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –¥–∞—Ç—ã
            sync_to_date: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ –¥–∞—Ç—É
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        
        if not self.token_id:
            raise ValueError("token_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤")
        
        sync_result = {
            "success": False,
            "started_at": datetime.utcnow(),
            "sync_type": "full" if full_sync else "incremental",
            "sync_from_date": sync_from_date,
            "sync_to_date": sync_to_date,
            "orders_processed": 0,
            "orders_created": 0,
            "orders_updated": 0,
            "orders_skipped": 0,
            "orders_failed": 0,
            "orders_deduplicated": 0,
            "events_saved": 0,
            "events_deduplicated": 0,
            "data_quality_score": 0.0,
            "critical_issues": [],
            "warnings": [],
            "paused_due_to_anomalies": False
        }
        
        try:
            # üîç 1. –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π...")
            
            should_pause = self.monitoring_service.should_pause_sync()
            if should_pause:
                sync_result["paused_due_to_anomalies"] = True
                raise SyncPausedException("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö")
                
            # üì• 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Allegro
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –æ—Ç Allegro (—Å {sync_from_date} –ø–æ {sync_to_date})...")
            
            # –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê API:
            # - –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ sync_from_date ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º Checkout Forms API (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞)
            # - –ï—Å–ª–∏ –Ω–µ—Ç sync_from_date ‚Üí –∏—Å–ø–æ–ª—å–∑—É–µ–º Events API (–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
            
            orders_data = []
            
            if sync_from_date:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Checkout Forms API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–∞–º
                logger.info(f"üóìÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Checkout Forms API –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ {sync_from_date} - {sync_to_date or '—Å–µ–π—á–∞—Å'}")
                orders_data = self._fetch_orders_by_date(sync_from_date, sync_to_date)
                
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Events API –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                logger.info("üì° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Events API –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º event ID –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                from_event_id = None
                
                if not full_sync:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π event_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    from_event_id = self._get_last_event_id_from_db()
                    if from_event_id:
                        logger.info(f"üîÑ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å event_id: {from_event_id}")
                    else:
                        logger.info("üîÑ –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞")
                else:
                    logger.info("üîÑ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–∫–∞–∑–æ–≤
                orders_data = self._fetch_order_events_safe(from_event_id=from_event_id, sync_to_date=sync_to_date)
            
            if not orders_data:
                logger.warning("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return sync_result
                
            # üì• 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(orders_data)} —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∑–∞–∫–∞–∑—ã)
            for data_item in orders_data:
                try:
                    source = data_item.get("source", "events_api")
                    
                    if source == "checkout_forms_api":
                        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Checkout Forms API - –ù–ï —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è
                        logger.debug("üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ Checkout Forms API")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∑–∞–∫–∞–∑–∞
                        order_id = data_item.get("order_id")
                        if order_id:
                            order_decision = self.deduplication_service.should_process_order(
                                order_id, UUID(self.token_id)
                            )
                            
                            if not order_decision["should_process"]:
                                logger.info(f"üîÑ –ó–∞–∫–∞–∑ {order_id} –ø—Ä–æ–ø—É—â–µ–Ω: {order_decision['reason']}")
                                sync_result["orders_deduplicated"] += 1
                                continue
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ —Å–æ–±—ã—Ç–∏—è)
                        result = self._process_single_order_safe(data_item)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        sync_result["orders_processed"] += 1
                        if result["action"] == "created":
                            sync_result["orders_created"] += 1
                        elif result["action"] == "updated":
                            sync_result["orders_updated"] += 1
                        elif result["action"] == "skipped":
                            sync_result["orders_skipped"] += 1
                            
                    else:
                        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ Events API - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
                        logger.debug("üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑ Events API")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                        event_info = data_item.get("event", {})
                        allegro_event_id = event_info.get("id")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
                        if allegro_event_id:
                            event_decision = self.deduplication_service.should_process_event(
                                allegro_event_id, UUID(self.token_id)
                            )
                            
                            if not event_decision["should_process"]:
                                logger.info(f"üîÑ –°–æ–±—ã—Ç–∏–µ {allegro_event_id} –ø—Ä–æ–ø—É—â–µ–Ω–æ: {event_decision['reason']}")
                                sync_result["events_deduplicated"] += 1
                                continue
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        self._save_all_events_to_db(data_item)
                        sync_result["events_saved"] += 1
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
                        event_type = event_info.get("type")
                        if event_type in ["BOUGHT", "FILLED_IN", "READY_FOR_PROCESSING", "BUYER_CANCELLED", "FULFILLMENT_STATUS_CHANGED", "AUTO_CANCELLED"]:
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
                            order_id = data_item.get("order_id")
                            if order_id:
                                order_decision = self.deduplication_service.should_process_order(
                                    order_id, UUID(self.token_id)
                                )
                                
                                if not order_decision["should_process"]:
                                    logger.info(f"üîÑ –ó–∞–∫–∞–∑ {order_id} –ø—Ä–æ–ø—É—â–µ–Ω: {order_decision['reason']}")
                                    sync_result["orders_deduplicated"] += 1
                                    continue
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
                            result = self._process_single_order_safe(data_item)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            sync_result["orders_processed"] += 1
                            if result["action"] == "created":
                                sync_result["orders_created"] += 1
                            elif result["action"] == "updated":
                                sync_result["orders_updated"] += 1
                            elif result["action"] == "skipped":
                                sync_result["orders_skipped"] += 1
                        else:
                            logger.debug(f"üìù –°–æ–±—ã—Ç–∏–µ {event_type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –∑–∞–∫–∞–∑ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                        
                except DataIntegrityError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–±—ã—Ç–∏—è {data_item.get('event', {}).get('id', 'unknown')}: {e}")
                    sync_result["orders_failed"] += 1
                    sync_result["critical_issues"].append(str(e))
                    
                except Exception as e:
                    logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {data_item.get('event', {}).get('id', 'unknown')}: {e}")
                    sync_result["orders_failed"] += 1
            
            # üìù 4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –Ω–∞—á–∞–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync_history = self._create_sync_history_record(sync_result["sync_type"])
            
            # üîç 4. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ {len(orders_data)} —Å–æ–±—ã—Ç–∏–π...")
            
            anomalies = self.monitoring_service.detect_data_anomalies(orders_data)
            if anomalies:
                sync_result["warnings"].extend(anomalies)
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏: {anomalies}")
                
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                critical_anomalies = [a for a in anomalies if "üö®" in a]
                if critical_anomalies:
                    sync_result["critical_issues"] = critical_anomalies
                    raise SyncPausedException(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö: {critical_anomalies}")
                    
            # üìä 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            health_metrics = self.monitoring_service.check_data_health(time_window_hours=1)
            sync_result["data_quality_score"] = 1.0 - health_metrics.anomaly_score
            
            # ‚úÖ 7. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            self._update_sync_history_record(sync_history, sync_result, success=True)
            
            sync_result["success"] = True
            sync_result["completed_at"] = datetime.utcnow()
            
            logger.info(
                f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: "
                f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {sync_result['orders_processed']}, "
                f"—Å–æ–∑–¥–∞–Ω–æ {sync_result['orders_created']}, "
                f"–æ–±–Ω–æ–≤–ª–µ–Ω–æ {sync_result['orders_updated']}, "
                f"–ø—Ä–æ–ø—É—â–µ–Ω–æ {sync_result['orders_skipped']}, "
                f"–¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤ {sync_result['orders_deduplicated']}, "
                f"—Å–æ–±—ã—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {sync_result['events_saved']}, "
                f"—Å–æ–±—ã—Ç–∏–π –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ {sync_result['events_deduplicated']}, "
                f"–æ—à–∏–±–æ–∫ {sync_result['orders_failed']}"
            )
            
            return sync_result
            
        except SyncPausedException as e:
            logger.error(f"üõë –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {e}")
            sync_result["critical_issues"].append(str(e))
            return sync_result
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            sync_result["critical_issues"].append(str(e))
            return sync_result
        
    def _fetch_orders_by_date(self, sync_from_date: datetime, sync_to_date: Optional[datetime] = None) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–∞–º —á–µ—Ä–µ–∑ Checkout Forms API.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∞ –¥–∞—Ç–∞ sync_from_date - –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Args:
            sync_from_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            sync_to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            List: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Allegro API
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from sqlmodel import select
            from app.models.user_token import UserToken
            from uuid import UUID
            
            try:
                token_uuid = UUID(self.token_id)
                query = select(UserToken).where(
                    UserToken.id == token_uuid,
                    UserToken.user_id == self.user_id,
                    UserToken.is_active == True,
                    UserToken.expires_at > datetime.utcnow()
                )
                
                token_record = self.db.exec(query).first()
                if not token_record:
                    logger.error(f"‚ùå –¢–æ–∫–µ–Ω {self.token_id} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id}")
                    return []
                    
                token = token_record.allegro_token
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω {self.token_id} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–∞–º")
                
            except ValueError:
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID —Ç–æ–∫–µ–Ω–∞: {self.token_id}")
                return []
                
            headers = {
                "Authorization": f"Bearer {token}",
                "Accept": "application/vnd.allegro.public.v1+json"
            }
            
            # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ (checkout-forms)
            url = "https://api.allegro.pl/order/checkout-forms"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–∞—Ç–∞–º
            params = {
                "limit": 100,  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å
                "lineItems.boughtAt.gte": sync_from_date.isoformat(),
                "sort": "lineItems.boughtAt"  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –ø–æ–∫—É–ø–∫–∏ (ascending)
            }
            
            if sync_to_date:
                params["lineItems.boughtAt.lte"] = sync_to_date.isoformat()
                
            all_orders = []
            offset = 0
            
            while True:
                params["offset"] = offset
                
                logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: offset={offset}, limit={params['limit']}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Allegro API
                with httpx.Client() as client:
                    response = client.get(url, headers=headers, params=params, timeout=30.0)
                    response.raise_for_status()
                    
                    data = response.json()
                    orders = data.get("checkoutForms", [])
                    
                    if not orders:
                        logger.info("üìã –ë–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ")
                        break
                        
                    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –æ—Ç Allegro API")
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    # –ù–ï —Å–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è - —ç—Ç–æ –ø—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
                    for order in orders:
                        order_record = {
                            "order": order,  # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                            "order_id": order.get("id"),
                            "source": "checkout_forms_api"  # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                        }
                        all_orders.append(order_record)
                    
                    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –ª–∏–º–∏—Ç, –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
                    if len(orders) < params["limit"]:
                        logger.info("üìã –ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
                        break
                        
                    offset += params["limit"]
                    
                    # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    if offset > 10000:  # –ú–∞–∫—Å–∏–º—É–º 10K –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Ä–∞–∑
                        logger.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 10K –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ")
                        break
            
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(all_orders)} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ {sync_from_date} - {sync_to_date or '—Å–µ–π—á–∞—Å'}")
            return all_orders
                
        except httpx.HTTPStatusError as e:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–∞–º: {e.response.status_code}")
            logger.error(f"‚ùå –û—Ç–≤–µ—Ç API: {e.response.text}")
            return []
            
        except httpx.TimeoutException:
            logger.error("‚ùå Timeout –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–∞–º –æ—Ç Allegro API")
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–∞—Ç–∞–º: {e}")
            return []

    def _get_last_event_id_from_db(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π event_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ Events API.
        –ï—Å–ª–∏ event_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É —á–µ—Ä–µ–∑ Allegro API Statistics.
        
        Returns:
            Optional[str]: –ü–æ—Å–ª–µ–¥–Ω–∏–π event_id –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            from sqlmodel import select, desc
            from app.models.order_event import OrderEvent
            from uuid import UUID
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            query = select(OrderEvent).where(
                OrderEvent.token_id == UUID(self.token_id),
                OrderEvent.event_id.isnot(None)  # –¢–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è —Å event_id
            ).order_by(desc(OrderEvent.occurred_at)).limit(1)
            
            last_event = self.db.exec(query).first()
            
            if last_event and last_event.event_id:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π event_id –≤ –ë–î: {last_event.event_id}")
                return last_event.event_id
            else:
                logger.info("üîç Event_id –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –æ—Ç Allegro API")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É —Å–æ–±—ã—Ç–∏–π –æ—Ç Allegro API
                current_event_id = self._get_current_event_point_from_api()
                
                if current_event_id:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É –≤ –ë–î –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    self._save_starting_point_event(current_event_id)
                    logger.info(f"üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ event_id: {current_event_id}")
                    return current_event_id
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É —Å–æ–±—ã—Ç–∏–π")
                    return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ event_id: {e}")
            return None

    def _get_current_event_point_from_api(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É —Å–æ–±—ã—Ç–∏–π –æ—Ç Allegro API —á–µ—Ä–µ–∑ Statistics endpoint.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API: GET /order/events/statistics
        
        Returns:
            Optional[str]: –¢–µ–∫—É—â–∏–π event_id –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from sqlmodel import select
            from app.models.user_token import UserToken
            from uuid import UUID
            
            try:
                token_uuid = UUID(self.token_id)
                query = select(UserToken).where(
                    UserToken.id == token_uuid,
                    UserToken.user_id == self.user_id,
                    UserToken.is_active == True,
                    UserToken.expires_at > datetime.utcnow()
                )
                
                token_record = self.db.exec(query).first()
                if not token_record:
                    logger.error(f"‚ùå –¢–æ–∫–µ–Ω {self.token_id} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id}")
                    return None
                    
                token = token_record.allegro_token
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {self.token_id}")
                
            except ValueError:
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID —Ç–æ–∫–µ–Ω–∞: {self.token_id}")
                return None
                
            headers = {
                "Authorization": f"Bearer {token}",
                "Accept": "application/vnd.allegro.public.v1+json"
            }
            
            # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            url = "https://api.allegro.pl/order/events/statistics"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Allegro API
            with httpx.Client() as client:
                response = client.get(url, headers=headers, timeout=30.0)
                response.raise_for_status()
                
                data = response.json()
                latest_event = data.get("latestEvent", {})
                
                event_id = latest_event.get("id")
                occurred_at = latest_event.get("occurredAt")
                
                if event_id:
                    logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è —Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏–π: id={event_id}, time={occurred_at}")
                    return event_id
                else:
                    logger.warning("‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ API –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç event_id")
                    return None
                
        except httpx.HTTPStatusError as e:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e.response.status_code}")
            logger.error(f"‚ùå –û—Ç–≤–µ—Ç API: {e.response.text}")
            return None
            
        except httpx.TimeoutException:
            logger.error("‚ùå Timeout –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç Allegro API")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return None

    def _save_starting_point_event(self, event_id: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É —Å–æ–±—ã—Ç–∏–π –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î.
        
        –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤ –±—É–¥—É—â–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —ç—Ç–æ–π —Ç–æ—á–∫–∏.
        
        Args:
            event_id: ID —Å–æ–±—ã—Ç–∏—è - —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        
        from app.models.order_event import OrderEvent
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏
            starting_point_event = OrderEvent(
                order_id=None,  # –≠—Ç–æ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–∫–∞–∑–æ–º
                token_id=self.token_id,
                event_type="SYNC_STARTING_POINT",
                event_data={
                    "event_id": event_id,
                    "purpose": "starting_point_for_incremental_sync",
                    "created_at": datetime.utcnow().isoformat(),
                    "source": "allegro_events_statistics_api"
                },
                occurred_at=datetime.utcnow(),
                event_id=event_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                is_duplicate=False
            )
            
            self.db.add(starting_point_event)
            self.db.commit()
            
            logger.info(f"üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏–π: event_id={event_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            self.db.rollback()
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏

    def _fetch_order_events_safe(self, from_event_id: Optional[str] = None, sync_to_date: Optional[datetime] = None) -> List[Dict[str, Any]]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤ –æ—Ç Allegro API.
        
        –í–ê–ñ–ù–û: Events API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏–π, –±–µ–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞!
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Checkout Forms API.
        
        Args:
            from_event_id: ID —Å–æ–±—ã—Ç–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            sync_to_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤–µ–µ —ç—Ç–æ–π –¥–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã
            
        Returns:
            List: –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç Allegro API
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from sqlmodel import select
            from app.models.user_token import UserToken
            from datetime import datetime
            from uuid import UUID
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ ID
            try:
                token_uuid = UUID(self.token_id)
                query = select(UserToken).where(
                    UserToken.id == token_uuid,
                    UserToken.user_id == self.user_id,
                    UserToken.is_active == True,
                    UserToken.expires_at > datetime.utcnow()
                )
                
                token_record = self.db.exec(query).first()
                if not token_record:
                    logger.error(f"‚ùå –¢–æ–∫–µ–Ω {self.token_id} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user_id}")
                    return []
                    
                token = token_record.allegro_token
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω {self.token_id} –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                
            except ValueError:
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π UUID —Ç–æ–∫–µ–Ω–∞: {self.token_id}")
                return []
                
            headers = {
                "Authorization": f"Bearer {token}",
                "Accept": "application/vnd.allegro.public.v1+json"
            }
            
            # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤
            url = "https://api.allegro.pl/order/events"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {"limit": 1000}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º event ID –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∞ –Ω–µ –¥–∞—Ç—É)
            if from_event_id:
                params["from"] = from_event_id
                logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å event ID: {from_event_id}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Allegro API
            with httpx.Client() as client:
                response = client.get(url, headers=headers, params=params, timeout=30.0)
                response.raise_for_status()
                
                events_data = response.json()
                events = events_data.get("events", [])
                
                logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –æ—Ç Allegro API")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
                if sync_to_date:
                    filtered_events = []
                    for event in events:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
                        event_time = None
                        if "occurredAt" in event:
                            event_time = datetime.fromisoformat(event["occurredAt"].replace("Z", "+00:00"))
                        
                        # –í–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –Ω–æ–≤–µ–µ sync_to_date
                        if event_time and event_time <= sync_to_date:
                            filtered_events.append(event)
                        elif not event_time:
                            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
                            filtered_events.append(event)
                    
                    events = filtered_events
                    logger.info(f"üóìÔ∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {len(events)} —Å–æ–±—ã—Ç–∏–π")
                
                # –í–ê–ñ–ù–û: –°–æ–±—ã—Ç–∏—è —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —Å order_id –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Checkout Forms API
                valid_events = []
                
                for event in events:
                    event_data = {
                        "id": event.get("id"),
                        "type": event.get("type"),
                        "occurredAt": event.get("occurredAt"),
                        "publishedAt": event.get("publishedAt")
                    }
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å order_id –∏–∑ —Å–æ–±—ã—Ç–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ API
                    order_id = None
                    order_data = event.get("order", {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è order_id
                    if order_data:
                        # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ checkoutForm.id
                        checkout_form = order_data.get("checkoutForm", {})
                        if checkout_form and isinstance(checkout_form, dict):
                            order_id = checkout_form.get("id")
                        
                        # 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ –≤ order.id  
                        if not order_id:
                            order_id = order_data.get("id")
                    
                    # 3. –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–±—ã—Ç–∏—è
                    if not order_id:
                        # –ò–Ω–æ–≥–¥–∞ order_id –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∫–æ—Ä–Ω–µ —Å–æ–±—ã—Ç–∏—è
                        order_id = event.get("orderId") or event.get("order_id")
                    
                    # 4. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏–∑–≤–ª–µ—á—å –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π –∑–∞–∫–∞–∑–∞
                    if not order_id and order_data:
                        # –ï—Å–ª–∏ checkoutForm –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}, –≤–æ–∑–º–æ–∂–Ω–æ order_id –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è order_data –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID-–ø–æ–¥–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                        for key, value in order_data.items():
                            if key in ['id', 'orderId', 'checkoutFormId'] and value:
                                order_id = value
                                break
                    
                    if order_id:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤
                        full_order_data = self._fetch_order_details_safe(order_id, headers)
                        
                        if full_order_data:
                            event_record = {
                                "event": event_data,
                                "order": full_order_data,  # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                                "order_id": order_id,
                                "source": "events_api"  # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
                            }
                            valid_events.append(event_record)
                            logger.debug(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event.get('type')} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–µ
                            event_record = {
                                "event": event_data,
                                "order": {},  # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                                "order_id": order_id,
                                "source": "events_api"
                            }
                            valid_events.append(event_record)
                            logger.warning(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ {event.get('type')} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
                    else:
                        # –°–æ–±—ã—Ç–∏–µ –±–µ–∑ order_id (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ)
                        event_record = {
                            "event": event_data,
                            "order": {},  # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                            "order_id": None,
                            "source": "events_api"
                        }
                        valid_events.append(event_record)
                        logger.debug(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event.get('type')} –±–µ–∑ order_id –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.debug(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ order_id: {event}")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                        if logger.isEnabledFor(logging.DEBUG):
                            event_keys = list(event.keys()) if isinstance(event, dict) else "–ù–ï –°–õ–û–í–ê–†–¨"
                            order_info = event.get("order", "–ù–ï–¢ –ü–û–õ–Ø ORDER")
                            if isinstance(order_info, dict):
                                order_keys = list(order_info.keys())
                                logger.debug(f"üîç –ö–ª—é—á–∏ —Å–æ–±—ã—Ç–∏—è: {event_keys}")
                                logger.debug(f"üîç –ö–ª—é—á–∏ order: {order_keys}")
                                
                                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è ID
                                for key, value in order_info.items():
                                    if isinstance(value, (str, int)) and ("id" in key.lower() or len(str(value)) > 10):
                                        logger.debug(f"üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π ID –≤ order.{key}: {value}")
                                    elif isinstance(value, dict) and value:
                                        for sub_key, sub_value in value.items():
                                            if isinstance(sub_value, (str, int)) and ("id" in sub_key.lower() or len(str(sub_value)) > 10):
                                                logger.debug(f"üîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π ID –≤ order.{key}.{sub_key}: {sub_value}")
                            else:
                                logger.debug(f"üîç order –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º: {type(order_info)}")
                
                return valid_events
                
        except httpx.HTTPStatusError as e:
            logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e.response.status_code}")
            logger.error(f"‚ùå –û—Ç–≤–µ—Ç API: {e.response.text}")
            return []
            
        except httpx.TimeoutException:
            logger.error("‚ùå Timeout –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç Allegro API")
            return []
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
            return []
            
    def _fetch_order_details_safe(self, order_id: str, headers: Dict[str, str]) -> Optional[Dict[str, Any]]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            headers: HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            
        Returns:
            Optional[Dict]: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        try:
            url = f"https://api.allegro.pl/order/checkout-forms/{order_id}"
            
            with httpx.Client() as client:
                response = client.get(url, headers=headers, timeout=15.0)
                
                if response.status_code == 404:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—ä–µ–¥–∏–Ω–µ–Ω)")
                    return None
                    
                response.raise_for_status()
                return response.json()
                
        except httpx.HTTPStatusError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ {order_id}: {e.response.status_code}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            return None
            
    def _process_single_order_safe(self, data_item: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –¥–∞–Ω–Ω—ã—Ö.
        
        –†–∞–±–æ—Ç–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–∫ –∏–∑ Events API (—Å —Å–æ–±—ã—Ç–∏—è–º–∏), —Ç–∞–∫ –∏ –∏–∑ Checkout Forms API (–±–µ–∑ —Å–æ–±—ã—Ç–∏–π).
        
        Args:
            data_item: –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (—Å —Å–æ–±—ã—Ç–∏–µ–º –∏–ª–∏ –±–µ–∑)
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
        """
        
        # üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        try:
            source = data_item.get("source", "events_api")
            order_data = data_item.get("order", {})
            order_id = data_item.get("order_id")
            
            if not order_id or not order_data:
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {data_item}")
                return {"success": False, "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö", "action": "failed"}
                
        except (KeyError, AttributeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", "action": "failed"}
        
        # üìÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        try:
            occurred_at = None
            order_date = None
            
            if source == "events_api":
                # –î–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Events API –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
                event_data = data_item.get("event", {})
                if "occurredAt" in event_data:
                    occurred_at = datetime.fromisoformat(event_data["occurredAt"].replace("Z", "+00:00"))
            
            # –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ –ø–æ–ª—è boughtAt (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤)
            line_items = order_data.get("lineItems", [])
            if line_items and isinstance(line_items, list) and len(line_items) > 0:
                # –ë–µ—Ä–µ–º –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                first_item = line_items[0]
                if "boughtAt" in first_item:
                    order_date = datetime.fromisoformat(first_item["boughtAt"].replace("Z", "+00:00"))
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ boughtAt, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            if not order_date and "updatedAt" in order_data:
                order_date = datetime.fromisoformat(order_data["updatedAt"].replace("Z", "+00:00"))
            
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            if not order_date:
                order_date = occurred_at or datetime.utcnow()
            if not occurred_at:
                occurred_at = order_date
                
            logger.debug(f"üìÖ –ó–∞–∫–∞–∑ {order_id}: source={source}, occurred_at={occurred_at}, order_date={order_date}")
            
        except (ValueError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            occurred_at = datetime.utcnow()
            order_date = datetime.utcnow()
        
        # üîÑ –ò–∑–≤–ª–µ–∫–∞–µ–º revision –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        revision = order_data.get("revision")
        if not revision:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫–∞–∫ revision
            revision = str(int(occurred_at.timestamp())) if occurred_at else str(int(datetime.utcnow().timestamp()))
        
        logger.debug(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ {order_id}, revision {revision}, source={source}")
        
        # üìä –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¢–û–õ–¨–ö–û –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Events API
        if source == "events_api":
            try:
                event_data = data_item.get("event", {})
                self._save_order_event(
                    order_id=order_id,
                    event_type=event_data.get("type", "UNKNOWN"),
                    event_data=event_data,
                    occurred_at=occurred_at
                )
                logger.debug(f"üìä –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        else:
            logger.debug(f"üìã –ó–∞–∫–∞–∑ {order_id} –∏–∑ Checkout Forms API - —Å–æ–±—ã—Ç–∏–µ –ù–ï —Å–æ–∑–¥–∞–µ—Ç—Å—è")
        
        # üõ°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        result = self.protection_service.safe_order_update(
            order_id=order_id,
            new_data=order_data,
            allegro_revision=revision,
            order_date=order_date
        )
        
        if not result["success"]:
            logger.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id} –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω: {result['message']}")
        else:
            logger.info(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result['action']} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})")
            
        return result
        
    def _create_sync_history_record(self, sync_type: str) -> SyncHistory:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –Ω–∞—á–∞–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        
        sync_history = SyncHistory(
            token_id=self.token_id,
            sync_started_at=datetime.utcnow(),
            sync_status=SyncStatus.RUNNING
        )
        
        self.db.add(sync_history)
        self.db.commit()
        self.db.refresh(sync_history)
        
        return sync_history
        
    def _update_sync_history_record(self, sync_history: SyncHistory, 
                                   sync_result: Dict[str, Any],
                                   success: bool, error: Optional[str] = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        
        sync_history.sync_completed_at = datetime.utcnow()
        sync_history.sync_status = SyncStatus.COMPLETED if success else SyncStatus.FAILED
        sync_history.orders_processed = sync_result["orders_processed"]
        sync_history.orders_added = sync_result.get("orders_created", 0)
        sync_history.orders_updated = sync_result.get("orders_updated", 0)
        sync_history.error_message = error
        
        self.db.commit()
        
    def emergency_restore_from_events(self, order_id: str, 
                                     target_timestamp: Optional[datetime] = None) -> bool:
        """
        –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–±—ã—Ç–∏–π.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª—É—á–∞–µ –∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è.
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            target_timestamp: –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ None)
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞
            from sqlmodel import select
            events = self.db.exec(
                select(OrderEvent)
                .where(OrderEvent.order_id == order_id)
                .order_by(OrderEvent.occurred_at.desc())
            ).all()
            
            if not events:
                logger.error(f"‚ùå –°–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
                
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            target_event = None
            for event in events:
                if target_timestamp is None or event.occurred_at <= target_timestamp:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
                    if self.protection_service.validate_order_data_quality(event.event_data):
                        target_event = event
                        break
                        
            if not target_event:
                logger.error(f"‚ùå –í–∞–ª–∏–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ —Å–æ–±—ã—Ç–∏—è
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑ —Å–æ–±—ã—Ç–∏—è {target_event.id}")
            
            result = self.protection_service.safe_order_update(
                order_id=order_id,
                new_data=target_event.event_data,
                allegro_revision=target_event.event_data.get("revision")
            )
            
            if result["success"]:
                logger.info(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
                self.protection_service._save_order_event(
                    order_id, "ORDER_RESTORED", {
                        "restored_from_event_id": target_event.id,
                        "restored_at": datetime.utcnow().isoformat(),
                        "reason": "emergency_restore"
                    }
                )
                
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ {order_id}: {result['message']}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            return False 

    def _save_all_events_to_db(self, event_data: Dict[str, Any]):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã audit trail.
        
        Args:
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å –∑–∞–∫–∞–∑–æ–º
        """
        
        from app.models.order_event import OrderEvent
        
        try:
            event_info = event_data.get("event", {})
            order_id = event_data.get("order_id")
            allegro_event_id = event_info.get("id")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è
            occurred_at = datetime.utcnow()
            if "occurredAt" in event_info:
                try:
                    occurred_at = datetime.fromisoformat(event_info["occurredAt"].replace("Z", "+00:00"))
                except (ValueError, TypeError):
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è: {event_info.get('occurredAt')}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è
            order_event = OrderEvent(
                order_id=order_id,
                token_id=self.token_id,
                event_type=event_info.get("type", "UNKNOWN"),
                event_data=event_info,
                occurred_at=occurred_at,
                event_id=allegro_event_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º allegro_event_id –¥–ª—è pagination
                is_duplicate=False
            )
            
            self.db.add(order_event)
            self.db.commit()
            
            logger.debug(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_info.get('type')} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id or 'unknown'}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑—É: {e}")
            self.db.rollback()
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            
    def _save_order_event(self, order_id: str, event_type: str, 
                         event_data: Dict[str, Any], occurred_at: Optional[datetime] = None):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è  
            event_data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            occurred_at: –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)
        """
        
        from app.models.order_event import OrderEvent
        
        if not occurred_at:
            occurred_at = datetime.utcnow()
        
        try:
            order_event = OrderEvent(
                order_id=order_id,
                token_id=self.token_id,
                event_type=event_type,
                event_data=event_data,
                occurred_at=occurred_at
            )
            
            self.db.add(order_event)
            self.db.commit()
            logger.debug(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –≤ {occurred_at}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            self.db.rollback()
            raise
    
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    def get_user_sync_history(self, user_id: str, page: int = 1, per_page: int = 10, 
                            token_id=None, status=None, date_from=None, date_to=None):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return {
            "syncs": [],
            "total": 0,
            "page": page,
            "per_page": per_page
        }
    
    def start_token_sync(self, user_id: str, token_id, sync_from_date=None, 
                        sync_to_date=None, force_full_sync=False):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞"""
        return {
            "task_id": "test-task-id",
            "status": "PENDING", 
            "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞",
            "started_at": datetime.utcnow()
        }
    
    def get_sync_status(self, sync_id: str, user_id: str):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return None
    
    def cancel_sync(self, sync_id: str, user_id: str):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return {"success": False, "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    
    def get_user_sync_stats(self, user_id: str, date_from=None, date_to=None):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return {
            "total_syncs": 0,
            "successful_syncs": 0,
            "failed_syncs": 0,
            "running_syncs": 0,
            "total_orders_processed": 0,
            "total_orders_added": 0,
            "total_orders_updated": 0,
            "last_sync_date": None,
            "average_sync_duration": None
        }
    
    def get_running_syncs(self, user_id: str):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π"""
        return [] 