"""
@file: task_history_service.py
@description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π Celery –∑–∞–¥–∞—á (TaskHistory)
@dependencies: TaskHistory, sqlmodel
"""
import json
import logging
from datetime import datetime
from typing import Optional, Dict, Any
from uuid import UUID

from sqlmodel import Session, select
from app.models.task_history import TaskHistory

logger = logging.getLogger(__name__)

class TaskHistoryService:
    def __init__(self, db: Session):
        self.db = db

    def create_task(self, task_id: str, user_id: str, task_type: str, params: dict, description: str = None, parent_task_id: str = None):
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É upsert –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ duplicate key.
        """
        now = datetime.utcnow()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º task_id
            existing_task = self.db.exec(select(TaskHistory).where(TaskHistory.task_id == task_id)).first()
            
            if existing_task:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É
                existing_task.status = "PENDING"
                existing_task.params = params
                existing_task.error = None
                existing_task.started_at = now
                existing_task.updated_at = now
                existing_task.finished_at = None
                if description:
                    existing_task.description = description
                if parent_task_id:
                    existing_task.parent_task_id = parent_task_id
                    
                self.db.commit()
                self.db.refresh(existing_task)
                
                logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ {task_id} —Ç–∏–ø–∞ {task_type}")
                return existing_task
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                task = TaskHistory(
                    task_id=task_id,
                    user_id=user_id,
                    task_type=task_type,
                    status="PENDING",
                    params=params,
                    result=None,
                    error=None,
                    started_at=now,
                    updated_at=now,
                    description=description,
                    progress=None,
                    parent_task_id=parent_task_id
                )
                self.db.add(task)
                self.db.commit()
                self.db.refresh(task)
                
                logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {task_id} —Ç–∏–ø–∞ {task_type}")
                return task
                
        except Exception as e:
            self.db.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)
            try:
                existing_task = self.db.exec(select(TaskHistory).where(TaskHistory.task_id == task_id)).first()
                if existing_task:
                    logger.info(f"üìù –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ {task_id} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
                    return existing_task
            except Exception as e2:
                logger.error(f"‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á–∏ {task_id}: {e2}")
            
            raise e

    def update_task(self, task_id: str, **kwargs):
        task = self.db.exec(select(TaskHistory).where(TaskHistory.task_id == task_id)).first()
        if not task:
            return None
        for key, value in kwargs.items():
            if not hasattr(task, key):
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
            if key == "result" and value is not None:
                # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º datetime –∏ UUID –≤ —Å—Ç—Ä–æ–∫–∏
                def default_serializer(obj):
                    if isinstance(obj, datetime):
                        return obj.isoformat()
                    elif isinstance(obj, UUID):
                        return str(obj)
                    raise TypeError(f"Type {type(obj)} not serializable")
                value = json.loads(json.dumps(value, default=default_serializer))
            setattr(task, key, value)
        self.db.commit()
        self.db.refresh(task)
        return task

    def get_task_by_id(self, task_id: str) -> Optional[TaskHistory]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ task_id"""
        return self.db.exec(select(TaskHistory).where(TaskHistory.task_id == task_id)).first()

    def get_tasks_by_user(self, user_id: str, limit: int = 50) -> list[TaskHistory]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ user_id)"""
        return self.db.exec(
            select(TaskHistory).where(TaskHistory.user_id == user_id).order_by(TaskHistory.started_at.desc()).limit(limit)
        ).all()

    def get_tasks_by_token(self, token_id: str, limit: int = 50) -> list[TaskHistory]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ token_id (–∏—â–µ—Ç –≤ params['token_id'])"""
        return self.db.exec(
            select(TaskHistory)
            .where(TaskHistory.params["token_id"].as_string() == token_id)
            .order_by(TaskHistory.started_at.desc())
            .limit(limit)
        ).all()

    def revoke_task(self, task_id: str, user_id: str) -> Optional[TaskHistory]:
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å REVOKED), —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç user_id"""
        task = self.get_task_by_id(task_id)
        if not task or task.user_id != user_id:
            return None
        task.status = "REVOKED"
        task.finished_at = datetime.utcnow()
        task.updated_at = datetime.utcnow()
        self.db.add(task)
        self.db.commit()
        self.db.refresh(task)
        return task

    def get_task_result(self, task_id: str, user_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç user_id"""
        task = self.get_task_by_id(task_id)
        if not task or task.user_id != user_id:
            return None
        return {
            "task_id": task.task_id,
            "status": task.status,
            "result": task.result,
            "error": task.error,
            "progress": task.progress,
            "started_at": task.started_at,
            "finished_at": task.finished_at,
            "updated_at": task.updated_at,
            "params": task.params,
            "description": task.description
        } 