"""
@file: app/core/logging.py
@description: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
@dependencies: logging, json
"""

import json
import logging
import logging.handlers
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict

from .settings import settings


class SQLAlchemyFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö SQLAlchemy –ª–æ–≥–æ–≤"""
    
    def filter(self, record):
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –ª–æ–≥–∏ –æ—Ç SQLAlchemy
        if record.name.startswith('sqlalchemy'):
            return False
        return True


class HumanReadableFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã—Ö –ª–æ–≥–æ–≤"""
    
    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –∏ —É—Ä–æ–≤–µ–Ω—å
        timestamp = datetime.fromtimestamp(record.created).strftime('%Y-%m-%d %H:%M:%S')
        level_emoji = self._get_level_emoji(record.levelno)
        level_name = record.levelname.ljust(8)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = record.getMessage()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        extra_info = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º user_id –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, "user_id"):
            extra_info.append(f"user={record.user_id}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º task_id –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, "task_id"):
            extra_info.append(f"task={record.task_id}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º request_id –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, "request_id"):
            extra_info.append(f"req={record.request_id}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º module –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        if record.name != "root" and record.name != "__main__":
            extra_info.append(f"module={record.name}")
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        result = f"{timestamp} {level_emoji} {level_name} {message}"
        
        if extra_info:
            result += f" | {' | '.join(extra_info)}"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            result += f"\n{self.formatException(record.exc_info)}"
            
        return result
    
    def _get_level_emoji(self, levelno: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if levelno >= logging.CRITICAL:
            return "üö®"
        elif levelno >= logging.ERROR:
            return "‚ùå"
        elif levelno >= logging.WARNING:
            return "‚ö†Ô∏è"
        elif levelno >= logging.INFO:
            return "‚ÑπÔ∏è"
        else:
            return "üîç"


class JSONFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è JSON –ª–æ–≥–æ–≤"""
    
    def format(self, record: logging.LogRecord) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ JSON"""
        log_entry: Dict[str, Any] = {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "level": record.levelname,
            "logger": record.name,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if record.exc_info:
            log_entry["exception"] = self.formatException(record.exc_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, "extra_data"):
            log_entry["extra"] = record.extra_data
            
        # –î–æ–±–∞–≤–ª—è–µ–º user_id –∏ request_id –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, "user_id"):
            log_entry["user_id"] = record.user_id
        if hasattr(record, "request_id"):
            log_entry["request_id"] = record.request_id
        if hasattr(record, "task_id"):
            log_entry["task_id"] = record.task_id
            
        return json.dumps(log_entry, ensure_ascii=False)


def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ SQLAlchemy –ª–æ–≥–∏
    logging.getLogger("sqlalchemy").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.engine").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.pool").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.dialects").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.orm").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.engine.base.Engine").setLevel(logging.CRITICAL)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    log_path = Path(settings.logging.file_path)
    log_path.parent.mkdir(parents=True, exist_ok=True)
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    logging.basicConfig(
        level=getattr(logging, settings.logging.level.upper()),
        format="%(message)s",
        handlers=[]
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.handlers.clear()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è SQLAlchemy
    sqlalchemy_filter = SQLAlchemyFilter()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫
    if settings.logging.format.lower() == "json":
        formatter = JSONFormatter()
    else:
        formatter = HumanReadableFormatter()
    
    # Handler –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    file_handler = logging.handlers.RotatingFileHandler(
        filename=settings.logging.file_path,
        maxBytes=settings.logging.max_bytes,
        backupCount=settings.logging.backup_count,
        encoding="utf-8"
    )
    file_handler.setFormatter(formatter)
    file_handler.addFilter(sqlalchemy_filter)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    logger.addHandler(file_handler)
    
    # Handler –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    if settings.api.debug:
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(formatter)
        console_handler.addFilter(sqlalchemy_filter)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    # SQLAlchemy - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
    logging.getLogger("sqlalchemy").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.engine").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.pool").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.dialects").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.orm").setLevel(logging.CRITICAL)
    logging.getLogger("sqlalchemy.engine.base.Engine").setLevel(logging.CRITICAL)
    
    # Celery - —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    logging.getLogger("celery").setLevel(logging.WARNING)
    logging.getLogger("celery.worker").setLevel(logging.INFO)
    logging.getLogger("celery.task").setLevel(logging.INFO)
    logging.getLogger("celery.worker.strategy").setLevel(logging.WARNING)
    
    # FastAPI –∏ Uvicorn
    logging.getLogger("uvicorn").setLevel(logging.WARNING)
    logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
    logging.getLogger("fastapi").setLevel(logging.WARNING)
    
    # HTTP –∫–ª–∏–µ–Ω—Ç—ã
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger("requests").setLevel(logging.WARNING)
    
    # Redis
    logging.getLogger("redis").setLevel(logging.WARNING)
    
    # Alembic
    logging.getLogger("alembic").setLevel(logging.WARNING)
    
    # –î—Ä—É–≥–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    logging.getLogger("asyncio").setLevel(logging.WARNING)
    logging.getLogger("aiohttp").setLevel(logging.WARNING)
    
    logger.info("Logging system initialized", extra={
        "extra_data": {
            "log_level": settings.logging.level,
            "log_file": settings.logging.file_path,
            "format": settings.logging.format
        }
    })


def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
    return logging.getLogger(name)


class LoggerMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∫ –∫–ª–∞—Å—Å–∞–º"""
    
    @property
    def logger(self) -> logging.Logger:
        """–õ–æ–≥–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º –∫–ª–∞—Å—Å–∞"""
        return get_logger(self.__class__.__name__)


def log_request(request_id: str, user_id: str = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            logger = get_logger(func.__name__)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            logger.info(
                f"Request started: {func.__name__}",
                extra={
                    "request_id": request_id,
                    "user_id": user_id,
                    "extra_data": {"args": str(args), "kwargs": str(kwargs)}
                }
            )
            
            try:
                result = func(*args, **kwargs)
                logger.info(
                    f"Request completed: {func.__name__}",
                    extra={"request_id": request_id, "user_id": user_id}
                )
                return result
            except Exception as e:
                logger.error(
                    f"Request failed: {func.__name__}",
                    extra={
                        "request_id": request_id,
                        "user_id": user_id,
                        "extra_data": {"error": str(e)}
                    },
                    exc_info=True
                )
                raise
        return wrapper
    return decorator


def log_celery_task(task_id: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Celery –∑–∞–¥–∞—á"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            logger = get_logger(func.__name__)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏
            logger.info(
                f"Celery task started: {func.__name__}",
                extra={
                    "task_id": task_id,
                    "extra_data": {"args": str(args), "kwargs": str(kwargs)}
                }
            )
            
            try:
                result = func(*args, **kwargs)
                logger.info(
                    f"Celery task completed: {func.__name__}",
                    extra={"task_id": task_id}
                )
                return result
            except Exception as e:
                logger.error(
                    f"Celery task failed: {func.__name__}",
                    extra={
                        "task_id": task_id,
                        "extra_data": {"error": str(e)}
                    },
                    exc_info=True
                )
                raise
        return wrapper
    return decorator 