"""
@file: app/main.py
@description: –ì–ª–∞–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
@dependencies: fastapi, uvicorn
"""

from contextlib import asynccontextmanager
from datetime import datetime
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

from app.core.settings import settings
from app.core.logging import setup_logging, get_logger
from app.core.database import db_manager
from app.core.auth import CurrentUser
from app.api.dependencies import CurrentUserDep


logger = get_logger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–ø—É—Å–∫
    logger.info("Starting Allegro Orders Backup service...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("Logging application configuration...")
    config_info = settings.log_configuration()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("Environment variables status:", extra={
        "environment_variables": config_info["environment_variables"]
    })
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    logger.info("Application configuration loaded:", extra={
        "database": config_info["database"],
        "redis": config_info["redis"], 
        "api": config_info["api"],
        "celery": config_info["celery"],
        "allegro": config_info["allegro"],
        "logging": config_info["logging"]
    })
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db_manager.startup()
    
    logger.info("Service started successfully")
    
    yield
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    logger.info("Shutting down service...")
    await db_manager.shutdown()
    logger.info("Service stopped")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Allegro Orders Backup",
    description="""
    ## –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Allegro API
    
    –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è:
    * **–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏** - —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ Allegro
    * **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏ —Ä—É—á–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Allegro
    * **–ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö** - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    * **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞** - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    ### –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Device Code Flow
    - üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
    - üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    - üîÑ Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
    - üìã –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    
    ### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
    - FastAPI + SQLModel + PostgreSQL
    - Celery + Redis –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    - Docker –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url=f"{settings.api.prefix}/openapi.json",
    lifespan=lifespan,
    contact={
        "name": "Allegro Orders Backup API",
        "url": "https://github.com/yourusername/allegro-orders-backup",
        "email": "admin@example.com",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    openapi_tags=[
        {
            "name": "general",
            "description": "–û–±—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: health check, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        },
        {
            "name": "tokens",
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ Allegro: —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ",
        },
        {
            "name": "orders",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–∫–∞–∑–∞–º–∏: –ø—Ä–æ—Å–º–æ—Ç—Ä, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å–æ–±—ã—Ç–∏—è",
        },
        {
            "name": "sync",
            "description": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤: –∑–∞–ø—É—Å–∫, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –∏—Å—Ç–æ—Ä–∏—è",
        },
    ]
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# –ë–∞–∑–æ–≤—ã–µ routes
@app.get("/", tags=["general"], summary="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API")
async def root():
    """
    –ë–∞–∑–æ–≤—ã–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–µ.
    """
    return {
        "service": "Allegro Orders Backup",
        "version": "1.0.0",
        "status": "running",
        "docs_url": "/docs",
        "redoc_url": "/redoc",
        "openapi_url": f"{settings.api.prefix}/openapi.json"
    }


@app.get("/health", tags=["general"], summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞")
async def health_check():
    """
    Health check endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    - –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    - –í–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from app.core.database import check_database_connection
        db_status = await check_database_connection()
        
        return {
            "status": "healthy" if db_status else "unhealthy",
            "database": "connected" if db_status else "disconnected",
            "service": "Allegro Orders Backup",
            "version": "1.0.0",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "database": "error",
            "error": str(e),
            "service": "Allegro Orders Backup",
            "version": "1.0.0",
            "timestamp": datetime.now().isoformat()
        }


@app.get("/config", tags=["general"], summary="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
async def get_configuration():
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    **–í–Ω–∏–º–∞–Ω–∏–µ:** –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏—Ä—É—é—Ç—Å—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    """
    try:
        config_info = settings.log_configuration()
        return {
            "service": "Allegro Orders Backup",
            "version": "1.0.0",
            "configuration": config_info,
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Failed to get configuration: {e}")
        return {
            "error": "Failed to load configuration",
            "details": str(e),
            "timestamp": datetime.now().isoformat()
        }


@app.get("/test-jwt", tags=["test"], summary="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞")
async def test_jwt_token(current_user: CurrentUser = CurrentUserDep):
    """
    –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    **–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JWT —Ç–æ–∫–µ–Ω.**
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞.
    """
    return {
        "message": "JWT —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω",
        "current_user": {
            "user_id": current_user.user_id,
            "username": current_user.username,
            "is_active": current_user.is_active
        },
        "timestamp": datetime.now().isoformat()
    }


@app.post("/test-jwt/create", tags=["test"], summary="–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞")
async def create_test_jwt_token(user_id: str = "test_user_123", username: str = "test_user"):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    **–¢–û–õ–¨–ö–û –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!**
    
    - **user_id**: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    - **username**: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    """
    from app.core.auth import create_access_token
    
    token_data = {
        "user_id": user_id,
        "username": username
    }
    
    access_token = create_access_token(data=token_data)
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "user_id": user_id,
        "username": username,
        "instructions": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: Authorization: Bearer <access_token>"
    }


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
from app.api.v1.api import api_router
app.include_router(api_router, prefix=settings.api.prefix)


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "app.main:app",
        host=settings.api.host,
        port=settings.api.port,
        reload=settings.api.debug,
        log_level=settings.logging.level.lower()
    ) 