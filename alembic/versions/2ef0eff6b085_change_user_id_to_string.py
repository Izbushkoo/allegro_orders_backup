"""change user id to string

Revision ID: 2ef0eff6b085
Revises: dc671ff6cbd7
Create Date: 2025-07-14 14:42:20.927567

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlmodel import SQLModel
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "2ef0eff6b085"
down_revision = "dc671ff6cbd7"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("celery_clockedschedule")
    op.drop_table("celery_periodictaskchanged")
    op.drop_table("celery_crontabschedule")
    op.drop_table("celery_solarschedule")
    op.drop_table("celery_intervalschedule")
    op.drop_table("celery_periodictask")
    op.alter_column(
        "active_sync_schedules",
        "user_id",
        existing_type=sa.UUID(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "task_history",
        "user_id",
        existing_type=sa.UUID(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "task_history",
        "user_id",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.alter_column(
        "active_sync_schedules",
        "user_id",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.UUID(),
        existing_nullable=False,
    )
    op.create_table(
        "celery_periodictask",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "name",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment="Short Description For This Task",
        ),
        sa.Column(
            "task",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
            comment='The Name of the Celery Task that Should be Run.  (Example: "proj.tasks.import_contacts")',
        ),
        sa.Column(
            "args",
            sa.TEXT(),
            autoincrement=False,
            nullable=False,
            comment='JSON encoded positional arguments (Example: ["arg1", "arg2"])',
        ),
        sa.Column(
            "kwargs",
            sa.TEXT(),
            autoincrement=False,
            nullable=False,
            comment='JSON encoded keyword arguments (Example: {"argument": "value"})',
        ),
        sa.Column(
            "queue",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="Queue defined in CELERY_TASK_QUEUES. Leave None for default queuing.",
        ),
        sa.Column(
            "exchange",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="Override Exchange for low-level AMQP routing",
        ),
        sa.Column(
            "routing_key",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
            comment="Override Routing Key for low-level AMQP routing",
        ),
        sa.Column(
            "headers",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="JSON encoded message headers for the AMQP message.",
        ),
        sa.Column(
            "priority",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Priority Number between 0 and 255. Supported by: RabbitMQ, Redis (priority reversed, 0 is highest).",
        ),
        sa.Column(
            "expires",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
            comment="Datetime after which the schedule will no longer trigger the task to run",
        ),
        sa.Column(
            "expire_seconds",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="Timedelta with seconds which the schedule will no longer trigger the task to run",
        ),
        sa.Column(
            "one_off",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
            comment="If True, the schedule will only run the task a single time",
        ),
        sa.Column(
            "start_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
            comment="Datetime when the schedule should begin triggering the task to run",
        ),
        sa.Column(
            "enabled",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
            comment="Set to False to disable the schedule",
        ),
        sa.Column(
            "last_run_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
            comment="Datetime that the schedule last triggered the task to run. ",
        ),
        sa.Column(
            "total_run_count",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Running count of how many times the schedule has triggered the task",
        ),
        sa.Column(
            "date_changed",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
            comment="Datetime that this PeriodicTask was last modified",
        ),
        sa.Column(
            "description",
            sa.TEXT(),
            autoincrement=False,
            nullable=True,
            comment="Detailed description about the details of this Periodic Task",
        ),
        sa.Column(
            "discriminator",
            sa.VARCHAR(length=20),
            autoincrement=False,
            nullable=False,
            comment="Lower case name of the schedule class. ",
        ),
        sa.Column(
            "schedule_id",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="ID of the schedule model object. ",
        ),
        sa.CheckConstraint(
            "priority >= 0 AND priority <= 255",
            name=op.f("celery_periodictask_priority_check"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("celery_periodictask_pkey")),
        sa.UniqueConstraint(
            "name",
            name=op.f("celery_periodictask_name_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        "celery_intervalschedule",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "every",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
            comment="Number of interval periods to wait before running the task again",
        ),
        sa.Column(
            "period",
            postgresql.ENUM(
                "days", "hours", "minutes", "seconds", "microseconds", name="period"
            ),
            autoincrement=False,
            nullable=False,
            comment="The type of period between task runs (Example: days)",
        ),
        sa.CheckConstraint(
            "every >= 1", name=op.f("celery_intervalschedule_every_check")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("celery_intervalschedule_pkey")),
    )
    op.create_table(
        "celery_solarschedule",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "event",
            postgresql.ENUM(
                "dawn_astronomical",
                "dawn_nautical",
                "dawn_civil",
                "sunrise",
                "solar_noon",
                "sunset",
                "dusk_civil",
                "dusk_nautical",
                "dusk_astronomical",
                name="solarevent",
            ),
            autoincrement=False,
            nullable=False,
            comment="The type of solar event when the job should run",
        ),
        sa.Column(
            "latitude",
            sa.NUMERIC(precision=9, scale=6),
            autoincrement=False,
            nullable=False,
            comment="Run the task when the event happens at this latitude",
        ),
        sa.Column(
            "longitude",
            sa.NUMERIC(precision=9, scale=6),
            autoincrement=False,
            nullable=False,
            comment="Run the task when the event happens at this longitude",
        ),
        sa.CheckConstraint(
            "latitude >= '-90'::integer::numeric AND latitude <= 90::numeric",
            name=op.f("celery_solarschedule_latitude_check"),
        ),
        sa.CheckConstraint(
            "longitude >= '-180'::integer::numeric AND longitude <= 180::numeric",
            name=op.f("celery_solarschedule_longitude_check"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("celery_solarschedule_pkey")),
        sa.UniqueConstraint(
            "event",
            "latitude",
            "longitude",
            name=op.f("celery_solarschedule_event_latitude_longitude_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        "celery_crontabschedule",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "minute",
            sa.VARCHAR(length=240),
            autoincrement=False,
            nullable=False,
            comment='Cron Minutes to Run. Use "*" for "all". (Example: "0,30")',
        ),
        sa.Column(
            "hour",
            sa.VARCHAR(length=96),
            autoincrement=False,
            nullable=False,
            comment='Cron Hours to Run. Use "*" for "all". (Example: "8,20")',
        ),
        sa.Column(
            "day_of_week",
            sa.VARCHAR(length=64),
            autoincrement=False,
            nullable=False,
            comment='Cron Days Of The Week to Run. Use "*" for "all", Sunday is 0 or 7, Monday is 1. (Example: "0,5")',
        ),
        sa.Column(
            "day_of_month",
            sa.VARCHAR(length=124),
            autoincrement=False,
            nullable=False,
            comment='Cron Days Of The Month to Run. Use "*" for "all". (Example: "1,15")',
        ),
        sa.Column(
            "month_of_year",
            sa.VARCHAR(length=64),
            autoincrement=False,
            nullable=False,
            comment='Cron Months (1-12) Of The Year to Run. Use "*" for "all". (Example: "1,12")',
        ),
        sa.Column(
            "timezone",
            sa.VARCHAR(length=64),
            autoincrement=False,
            nullable=False,
            comment="Timezone to Run the Cron Schedule on. Default is UTC.",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("celery_crontabschedule_pkey")),
    )
    op.create_table(
        "celery_periodictaskchanged",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "last_update",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("celery_periodictaskchanged_pkey")),
    )
    op.create_table(
        "celery_clockedschedule",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "clocked_time",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("celery_clockedschedule_pkey")),
    )
    # ### end Alembic commands ###
