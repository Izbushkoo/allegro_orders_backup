"""init

Revision ID: 74c7a32dc927
Revises: 
Create Date: 2025-07-14 11:41:46.871476

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlmodel import SQLModel
import sqlmodel


# revision identifiers, used by Alembic.
revision = "74c7a32dc927"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "task_history",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("task_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("task_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("params", sa.JSON(), nullable=True),
        sa.Column("result", sa.JSON(), nullable=True),
        sa.Column("error", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("started_at", sa.DateTime(), nullable=False),
        sa.Column("finished_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("progress", sa.Float(), nullable=True),
        sa.Column("parent_task_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_task_history_id"), "task_history", ["id"], unique=False)
    op.create_index(
        op.f("ix_task_history_status"), "task_history", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_task_history_task_id"), "task_history", ["task_id"], unique=True
    )
    op.create_index(
        op.f("ix_task_history_task_type"), "task_history", ["task_type"], unique=False
    )
    op.create_index(
        op.f("ix_task_history_user_id"), "task_history", ["user_id"], unique=False
    )
    op.create_table(
        "user_tokens",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("user_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("allegro_token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("refresh_token", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_tokens_user_id"), "user_tokens", ["user_id"], unique=False
    )
    op.create_table(
        "order_events",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("order_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("token_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("event_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("occurred_at", sa.DateTime(), nullable=False),
        sa.Column("event_data", sa.JSON(), nullable=True),
        sa.Column("event_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_duplicate", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["token_id"],
            ["user_tokens.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("token_id", "event_id", name="uq_order_events_per_token"),
        sa.UniqueConstraint(
            "token_id",
            "order_id",
            "event_type",
            "occurred_at",
            name="uq_order_events_composite",
        ),
    )
    op.create_index(
        op.f("ix_order_events_event_id"), "order_events", ["event_id"], unique=False
    )
    op.create_index(
        op.f("ix_order_events_event_type"), "order_events", ["event_type"], unique=False
    )
    op.create_index(
        op.f("ix_order_events_occurred_at"),
        "order_events",
        ["occurred_at"],
        unique=False,
    )
    op.create_index(
        op.f("ix_order_events_order_id"), "order_events", ["order_id"], unique=False
    )
    op.create_table(
        "orders",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("token_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column(
            "allegro_order_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("order_data", sa.JSON(), nullable=True),
        sa.Column("order_date", sa.DateTime(), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["token_id"],
            ["user_tokens.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("token_id", "allegro_order_id", name="uq_orders_per_token"),
    )
    op.create_index(
        op.f("ix_orders_allegro_order_id"), "orders", ["allegro_order_id"], unique=False
    )
    op.create_index(
        op.f("ix_orders_order_date"), "orders", ["order_date"], unique=False
    )
    op.create_table(
        "sync_history",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("token_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("sync_started_at", sa.DateTime(), nullable=False),
        sa.Column("sync_completed_at", sa.DateTime(), nullable=True),
        sa.Column(
            "sync_status",
            sa.Enum("RUNNING", "COMPLETED", "FAILED", "CANCELLED", name="syncstatus"),
            nullable=False,
        ),
        sa.Column("orders_processed", sa.Integer(), nullable=False),
        sa.Column("orders_added", sa.Integer(), nullable=False),
        sa.Column("orders_updated", sa.Integer(), nullable=False),
        sa.Column("error_message", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("sync_from_date", sa.DateTime(), nullable=True),
        sa.Column("sync_to_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["token_id"],
            ["user_tokens.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("sync_history")
    op.drop_index(op.f("ix_orders_order_date"), table_name="orders")
    op.drop_index(op.f("ix_orders_allegro_order_id"), table_name="orders")
    op.drop_table("orders")
    op.drop_index(op.f("ix_order_events_order_id"), table_name="order_events")
    op.drop_index(op.f("ix_order_events_occurred_at"), table_name="order_events")
    op.drop_index(op.f("ix_order_events_event_type"), table_name="order_events")
    op.drop_index(op.f("ix_order_events_event_id"), table_name="order_events")
    op.drop_table("order_events")
    op.drop_index(op.f("ix_user_tokens_user_id"), table_name="user_tokens")
    op.drop_table("user_tokens")
    op.drop_index(op.f("ix_task_history_user_id"), table_name="task_history")
    op.drop_index(op.f("ix_task_history_task_type"), table_name="task_history")
    op.drop_index(op.f("ix_task_history_task_id"), table_name="task_history")
    op.drop_index(op.f("ix_task_history_status"), table_name="task_history")
    op.drop_index(op.f("ix_task_history_id"), table_name="task_history")
    op.drop_table("task_history")
    # ### end Alembic commands ###
