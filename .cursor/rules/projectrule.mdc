---
description: 
globs: 
alwaysApply: true
---
Here are some best practices and rules you must follow:

- You use Python 3.12
- Frameworks:
  - pydantic v2
  - fastapi
  - SQLmodel
- You use celery and celery beat to wrap as much logic as possible
- You use Postgres as database
- You use .env file and load_env from python_dotenv for loading env variables
- You use docker-compose.yml for project compose
- You use poetry for dependency management
- You use alembic for database migrations


1. **Use Meaningful Names**: Choose descriptive variable, function, and class names.
2. **Follow PEP 8**: Adhere to the Python Enhancement Proposal 8 style guide for formatting.
3. **Use Docstrings**: Document functions and classes with docstrings to explain their purpose. 
4. **Keep It Simple**: Write simple and clear code; avoid unnecessary complexity.
5. **Use List Comprehensions**: Prefer list comprehensions for creating lists over traditional loops when appropriate.
6. **Handle Exceptions**: Use try-except blocks to handle exceptions gracefully.
7. **Use Virtual Environments**: Isolate project dependencies using virtual environments (e.g., `venv`).
8. **Write Tests**: Implement unit tests to ensure code reliability.
9. **Use Type Hints**: Utilize type hints for better code clarity and type checking.
10. **Avoid Global Variables**: Limit the use of global variables to reduce side effects.

These rules will help you write clean, efficient, and maintainable Python code. 